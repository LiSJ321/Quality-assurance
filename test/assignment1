from typing import List
import unittest
import coverage

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for c in tokens:
            if c == "+":
                stack.append(stack.pop() + stack.pop())
            elif c == "-":
                a, b = stack.pop(), stack.pop()
                stack.append(b - a)
            elif c == "*":
                stack.append(stack.pop() * stack.pop())
            elif c == "/":
                a, b = stack.pop(), stack.pop()
                stack.append(int(b / a))
            else:
                stack.append(int(c))
        return stack[0]

class TestEvalRPN(unittest.TestCase):
    def test_valid_operators(self):
        """
        Test that valid operators are allowed in the expression.
        """
        solution = Solution()
        tokens = ["1", "2", "+", "3", "-", "4", "*", "5", "/"]
        self.assertEqual(solution.evalRPN(tokens), -0)

    def test_valid_operand(self):
        """
        Test that valid operands are allowed in the expression.
        """
        solution = Solution()
        tokens = ["2", "3", "4a", "+"]
        with self.assertRaises(Exception):
            solution.evalRPN(tokens)

    def test_division_truncates_toward_zero(self):
        """
        Test that division between two integers always truncates toward zero.
        """
        solution = Solution()
        tokens = ["7", "-3", "/"]
        self.assertEqual(solution.evalRPN(tokens), -2)

    def test_no_division_by_zero(self):
        """
        Test that division by zero is not allowed.
        """
        solution = Solution()
        tokens = ["2", "0", "/"]
        with self.assertRaises(Exception):
            solution.evalRPN(tokens)

    def test_valid_expression(self):
        """
        Test that the input represents a valid arithmetic expression in a reverse polish notation.
        """
        solution = Solution()
        tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
        self.assertEqual(solution.evalRPN(tokens), 22)

    def test_result_within_32_bit_integer_range(self):
        """
        Test that the answer and all the intermediate calculations can be represented in a 32-bit integer.
        """
        solution = Solution()
        # This expression should not cause overflow or underflow of a 32-bit integer.
        tokens = ["2147483647", "1", "+"]
        self.assertEqual(solution.evalRPN(tokens), 2147483648)

if __name__ == "__main__":
    cov = coverage.Coverage()
    cov.start()

    unittest.main(argv=['first-arg-is-ignored'], exit=False)

    cov.stop()
    cov.save()
    cov.report()
if __name__ == "__main__":
    suite = unittest.TestLoader().loadTestsFromTestCase(TestEvalRPN)
    runner = unittest.TextTestRunner()
    result = runner.run(suite)

    if result.errors or result.failures:
        print("Errors/ Failures found:\n")
        print(result.errors)
        print(result.failures)
    else:
        print("All tests passed!")